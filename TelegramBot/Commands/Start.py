from Config import dp, bot
from Service.TelegramUserService import TelegramUserService
from Keyboards.keyboards import *
from States import FSMUser
from aiogram.dispatcher import filters
from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.dispatcher.filters import Command


@dp.message_handler(commands=['test'], state='*')
async def start(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(
            message.from_user.id,
            data,
        )


@dp.message_handler(commands=['start_'], state='*')
async def start(message: types.Message, state: FSMContext):
    _state = await state.get_state()
    if _state == 'None':
        await state.set_data({})
    TelegramUserService.CreateTelegramUser(message.from_user.id, message.from_user.username,
                                           message.from_user.first_name, message.from_user.last_name)
    await bot.send_message(
        message.from_user.id,
        "–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!",
        reply_markup=hello_kb
    )


@dp.callback_query_handler(lambda c: c.data == 'button1')
async def choosing_action(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(
        '–ü–æ–µ—Ö–∞–ª–∏!',
        reply_markup=reg_kb
    )


@dp.callback_query_handler(lambda c: c.data == 'name')
async def choosing_action(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(
        '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?‚úèÔ∏è'
    )
    await FSMUser.typing_name.set()


@dp.callback_query_handler(lambda c: c.data == 'age')
async def choosing_action(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(
        '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?‚úèÔ∏è'
    )
    await FSMUser.typing_age.set()


@dp.callback_query_handler(lambda c: c.data == 'department')
async def choosing_action(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(
        '–° –∫–∞–∫–æ–≥–æ —Ç—ã —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞?(–≤—ã–±–µ—Ä–∏)',
        reply_markup=department_kb
    )
    await FSMUser.typing_department.set()   


@dp.callback_query_handler(lambda c: c.data == 'course')
async def choosing_action(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(
        '–ö–∞–∫–æ–π –∫—É—Äc?(–≤—ã–±–µ—Ä–∏)',
        reply_markup=course_kb
    )
    await FSMUser.typing_course.set()


# @dp.callback_query_handler(state=FSMUser.typing_department)
# async def choosing_dep(call: types.CallbackQuery, state: FSMContext):
#     department = call.data
#     print(call.data)
#     async with state.proxy() as data:
#         data['department'] = department
#     await bot.send_message(
#         call.from_user.id,
#         f"–§–∞–∫—É–ª—å—Ç–µ—Ç {department} –∑–∞–ø–∏—Å–∞–Ω",
#         reply_markup=reg_kb
#     )


@dp.callback_query_handle(state=FSMUser.typing_age)
async def typing_name(call: types.CallbackQuery, state: FSMContext):
    age = call.data
    async with state.proxy() as data:
        data['age'] = age
    await bot.send_message(
        message.from_user.id,
        f"–ï–¥–µ–º –¥–∞–ª—å—à–µ!\n\n–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è, {data['data'][0]}üíü\n–¢–µ–±–µ {age} –ª–µ—Ç",
        reply_markup=reg_kb
    )
    await FSMUser.choosing_action_with_profile.set()


@dp.callback_query_handler(state=FSMUser.typing_department)
async def choosing_dep(call: types.CallbackQuery, state: FSMContext):
    department = call.data
    async with state.proxy() as data:
        data['department'] = department
    await bot.send_message(
        call.from_user.id,
        f"–§–∞–∫—É–ª—å—Ç–µ—Ç {department} –∑–∞–ø–∏—Å–∞–Ω",
        reply_markup=reg_kb
    )

# @dp.message_handler()
# async def echo_msg(message: types.Message):
#     await bot.send_message(message.from_user.id, message.text)


# @dp.message_handler(filters.Text(equals='–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'), state=FSMUser.choosing_action)
# async def choosing_action(message: types.Message, state: FSMContext):
#     await bot.send_message(
#         message.from_user.id,
#         'üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ',
#         reply_markup=get_user_actions()
#     )
#     await FSMUser.choosing_action_with_profile.set()


# @dp.message_handler(filters.Text(contains='–ò–º—è'), state=FSMUser.choosing_action_with_profile)
# async def choosing_action(message: types.Message, state: FSMContext):
#     await bot.send_message(
#         message.from_user.id,
#         '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?',
#     )
#     await FSMUser.typing_name.set()


# @dp.message_handler(filters.Text(contains='–í–æ–∑—Ä–∞—Å—Ç'), state=FSMUser.choosing_action_with_profile)
# async def choosing_action(message: types.Message, state: FSMContext):
#     await bot.send_message(
#         message.from_user.id,
#         '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?',
#     )
#     await FSMUser.typing_age.set()


# @dp.message_handler(filters.Text(contains='–§–∞–∫—É–ª—å—Ç–µ—Ç'), state=FSMUser.choosing_action_with_profile)
# async def choosing_action(message: types.Message, state: FSMContext):
#     await bot.send_message(
#         message.from_user.id,
#         '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç',
#         reply_markup=get_user_department()
#     )
#     await FSMUser.typing_department.set()


# @dp.message_handler(filters.Text(contains='–ö—É—Ä—Å'), state=FSMUser.choosing_action_with_profile)
# async def choosing_action(message: types.Message, state: FSMContext):
#     await bot.send_message(
#         message.from_user.id,
#         '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å',
#         reply_markup=get_user_course()
#     )
#     await FSMUser.typing_course.set()


# @dp.message_handler(filters.Text(contains='–•–æ–±–±–∏'), state=FSMUser.choosing_action_with_profile)
# async def choosing_action(message: types.Message, state: FSMContext):
#     await bot.send_message(
#         message.from_user.id,
#         '–ß–µ–º —Ç—ã –ª—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?\n\n*–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–±–±–∏, —Ç–æ –ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é*'
#     )
#     await FSMUser.typing_hobby.set()


# @dp.message_handler(filters.Text(contains='–û —Å–µ–±–µ'), state=FSMUser.choosing_action_with_profile)
# async def choosing_action(message: types.Message, state: FSMContext):
#     await bot.send_message(
#         message.from_user.id,
#         '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.',
#     )
#     await FSMUser.typing_description.set()


# # --------------------------------------------


# @dp.message_handler(state=FSMUser.typing_name)
# async def choosing_action(message: types.Message, state: FSMContext):
#     name = message.text
#     async with state.proxy() as data:
#         data['name'] = name
#     await FSMUser.choosing_action_with_profile.set()


# @dp.message_handler(state=FSMUser.typing_age)
# async def choosing_action(message: types.Message, state: FSMContext):
#     age = message.text
#     async with state.proxy() as data:
#         data['age'] = age
#     await bot.send_message(
#         message.from_user.id,
#         '‚úÖ –í–æ–∑—Ä–∞—Å—Ç –∑–∞–ø–∏—Å–∞–Ω',
#         reply_markup=get_user_actions()
#     )
#     await FSMUser.choosing_action_with_profile.set()


# @dp.message_handler(state=FSMUser.typing_department)
# async def choosing_action(message: types.Message, state: FSMContext):
#     department = message.text
#     async with state.proxy() as data:
#         data['department'] = department
#     await bot.send_message(
#         message.from_user.id,
#         '‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç –∑–∞–ø–∏—Å–∞–Ω',
#         reply_markup=get_user_actions()
#     )
#     await FSMUser.choosing_action_with_profile.set()


# @dp.message_handler(state=FSMUser.typing_course)
# async def choosing_action(message: types.Message, state: FSMContext):
#     course = message.text
#     async with state.proxy() as data:
#         data['course'] = course
#     await bot.send_message(
#         message.from_user.id,
#         '‚úÖ –ö—É—Ä—Å –∑–∞–ø–∏—Å–∞–Ω',
#         reply_markup=get_user_actions()
#     )
#     await FSMUser.choosing_action_with_profile.set()


# @dp.message_handler(state=FSMUser.typing_hobby)
# async def choosing_action(message: types.Message, state: FSMContext):
#     hobby = message.text
#     async with state.proxy() as data:
#         data['hobby'] = hobby.split(',')
#     await bot.send_message(
#         message.from_user.id,
#         '‚úÖ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —Ö–æ–±–±–∏!',
#         reply_markup=get_user_actions()
#     )
#     await FSMUser.choosing_action_with_profile.set()


# @dp.message_handler(state=FSMUser.typing_description)
# async def choosing_action(message: types.Message, state: FSMContext):
#     description = message.text
#     async with state.proxy() as data:
#         data['description'] = description
#     await bot.send_message(
#         message.from_user.id,
#         'üí• –¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–µ–Ω!',
#         reply_markup=get_user_actions()
#     )
#     await FSMUser.choosing_action_with_profile.set()
